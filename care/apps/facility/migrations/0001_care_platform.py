# Generated by Django 2.2.11 on 2020-05-22 11:21

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import location_field.models.spatial
import partial_index
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0002_auto_20200522_1408'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ambulance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vehicle_number', models.CharField(db_index=True, max_length=20, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_vehicle_number', message='Please Enter the vehicle number in all uppercase without spaces, eg: KL13AB1234', regex='^[A-Z]{2}[0-9]{1,2}[A-Z]{0,2}[0-9]{1,4}$')])),
                ('owner_name', models.CharField(max_length=255)),
                ('owner_phone_number', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('owner_is_smart_phone', models.BooleanField(default=True)),
                ('has_oxygen', models.BooleanField()),
                ('has_ventilator', models.BooleanField()),
                ('has_suction_machine', models.BooleanField()),
                ('has_defibrillator', models.BooleanField()),
                ('insurance_valid_till_year', models.IntegerField(choices=[(2020, 2020), (2021, 2021), (2022, 2022)])),
                ('ambulance_type', models.IntegerField(choices=[(1, 'Basic'), (2, 'Cardiac'), (3, 'Hearse')], default=1)),
                ('price_per_km', models.DecimalField(decimal_places=2, max_digits=7, null=True)),
                ('has_free_service', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('primary_district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='primary_ambulances', to='accounts.District')),
                ('secondary_district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='secondary_ambulances', to='accounts.District')),
                ('third_district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='third_ambulances', to='accounts.District')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=1000)),
                ('num_rooms', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('num_floors', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('num_buildings', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=1000)),
                ('is_active', models.BooleanField(default=True)),
                ('verified', models.BooleanField(default=False)),
                ('facility_type', models.IntegerField(choices=[(1, 'Educational Inst'), (2, 'Private Hospital'), (3, 'Other'), (4, 'Hostel'), (5, 'Hotel'), (6, 'Lodge'), (7, 'TeleMedicine'), (8, 'Govt Hospital'), (9, 'Labs'), (800, 'Primary Health Centres'), (801, '24x7 Public Health Centres'), (802, 'Family Health Centres'), (803, 'Community Health Centres'), (820, 'Urban Primary Health Center'), (830, 'Taluk Hospitals'), (831, 'Taluk Headquarters Hospitals'), (840, 'Women and Child Health Centres'), (850, 'General hospitals'), (860, 'District Hospitals'), (870, 'Govt Medical College Hospitals'), (950, 'Corona Testing Labs'), (1000, 'Corona Care Centre')])),
                ('location', location_field.models.spatial.LocationField(blank=True, null=True, srid=4326)),
                ('address', models.TextField()),
                ('oxygen_capacity', models.IntegerField(default=0)),
                ('phone_number', models.CharField(blank=True, max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('corona_testing', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.District')),
                ('local_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.LocalBody')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.State')),
            ],
            options={
                'verbose_name_plural': 'Facilities',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantitiy', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('minimum_stock', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit', models.CharField(max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('num', models.CharField(max_length=1000)),
                ('floor', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('beds_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('occupied_beds', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('room_type', models.IntegerField(choices=[(0, 'Total'), (1, 'General Bed'), (2, 'Hostel'), (3, 'Single Room with Attached Bathroom'), (10, 'ICU'), (20, 'Ventilator')])),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Building')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StaffRoomAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Room')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prev_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('new_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Inventory')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.InventoryItem'),
        ),
        migrations.CreateModel(
            name='HospitalDoctors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.IntegerField(choices=[(1, 'General Medicine'), (2, 'Pulmonology'), (3, 'Critical Care'), (4, 'Paediatrics'), (5, 'Other Speciality')])),
                ('count', models.IntegerField()),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFacilityCapacity',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('room_type', models.IntegerField(choices=[(0, 'Total'), (1, 'General Bed'), (2, 'Hostel'), (3, 'Single Room with Attached Bathroom'), (10, 'ICU'), (20, 'Ventilator')])),
                ('total_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('facility', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='facility.Facility')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical facility capacity',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FacilityVolunteer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
                ('volunteer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityStaff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityLocalGovtBody',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.District')),
                ('facility', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='facility.Facility')),
                ('local_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.LocalBody')),
            ],
        ),
        migrations.CreateModel(
            name='FacilityCapacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('room_type', models.IntegerField(choices=[(0, 'Total'), (1, 'General Bed'), (2, 'Hostel'), (3, 'Single Room with Attached Bathroom'), (10, 'ICU'), (20, 'Ventilator')])),
                ('total_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('current_capacity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility')),
            ],
        ),
        migrations.AddField(
            model_name='facility',
            name='users',
            field=models.ManyToManyField(related_name='facilities', through='facility.FacilityUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='building',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Facility'),
        ),
        migrations.CreateModel(
            name='AmbulanceDriver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('is_smart_phone', models.BooleanField()),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facility.Ambulance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='hospitaldoctors',
            index=partial_index.PartialIndex(fields=['facility', 'area'], name='facility_ho_facilit_efac7e_partial', unique=True, where=partial_index.PQ(active=True)),
        ),
        migrations.AddConstraint(
            model_name='facilitylocalgovtbody',
            constraint=models.CheckConstraint(check=models.Q(('local_body__isnull', False), ('district__isnull', False), _connector='OR'), name='cons_facilitylocalgovtbody_only_one_null'),
        ),
        migrations.AddIndex(
            model_name='facilitycapacity',
            index=partial_index.PartialIndex(fields=['facility', 'room_type'], name='facility_fa_facilit_9f0bcc_partial', unique=True, where=partial_index.PQ(active=True)),
        ),
    ]
