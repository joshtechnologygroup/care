# Generated by Django 2.2.11 on 2020-05-22 15:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import fernet_fields.fields
import multiselectfield.db.fields
import partial_index
import simple_history.models
import utils.models.jsonfield


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_auto_20200522_1408'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('facility', '0002_care_platform'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5)),
                ('temperature_measured_at', models.DateTimeField(blank=True, null=True)),
                ('physical_examination_info', models.TextField(blank=True, null=True)),
                ('additional_symptoms', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'ASYMPTOMATIC'), (2, 'FEVER'), (3, 'SORE THROAT'), (4, 'COUGH'), (5, 'BREATHLESSNESS'), (6, 'MYALGIA'), (7, 'ABDOMINAL DISCOMFORT'), (8, 'VOMITING/DIARRHOEA'), (9, 'OTHERS'), (10, 'SARI'), (11, 'SPUTUM'), (12, 'NAUSEA'), (13, 'CHEST PAIN'), (14, 'HEMOPTYSIS'), (15, 'NASAL DISCHARGE'), (16, 'BODY ACHE')], default=1, max_length=38, null=True)),
                ('other_symptoms', models.TextField(blank=True, default='')),
                ('patient_category', models.CharField(blank=True, choices=[('Mild', 'Category-A'), ('Moderate', 'Category-B'), ('Severe', 'Category-C'), (None, 'UNCLASSIFIED')], default=None, max_length=8, null=True)),
                ('current_health', models.IntegerField(blank=True, choices=[(0, 'NO DATA'), (1, 'REQUIRES VENTILATOR'), (2, 'WORSE'), (3, 'STATUS QUO'), (4, 'BETTER')], default=0)),
                ('recommend_discharge', models.BooleanField(default=False, verbose_name='Recommend Discharging Patient')),
                ('other_details', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('disease', models.IntegerField(choices=[(1, 'NO DISEASE'), (2, 'DIABETES'), (3, 'HEART DISEASE'), (4, 'HYPERTENSION'), (5, 'KIDNEY DISEASES'), (6, 'LUNG DISEASES/ASTHMA'), (7, 'CANCER')])),
                ('details', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FacilityPatientStatsHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_date', models.DateField()),
                ('num_patients_visited', models.IntegerField(default=0)),
                ('num_patients_home_quarantine', models.IntegerField(default=0)),
                ('num_patients_isolation', models.IntegerField(default=0)),
                ('num_patient_referred', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('source', models.IntegerField(choices=[(10, 'CARE'), (20, 'COVID_TRACKER'), (30, 'STAY')], default=10)),
                ('name', fernet_fields.fields.EncryptedCharField(max_length=200)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Non-binary')])),
                ('phone_number', fernet_fields.fields.EncryptedCharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('address', fernet_fields.fields.EncryptedTextField(default='')),
                ('date_of_birth', models.DateField(default=None, null=True)),
                ('year_of_birth', models.IntegerField(default=0, null=True)),
                ('nationality', models.CharField(default='', max_length=255, verbose_name='Nationality of Patient')),
                ('passport_no', models.CharField(default='', max_length=255, verbose_name='Passport Number of Foreign Patients')),
                ('aadhar_no', models.CharField(default='', max_length=255, verbose_name='Aadhar Number of Patient')),
                ('is_medical_worker', models.BooleanField(default=False, verbose_name='Is the Patient a Medical Worker')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=4, null=True, verbose_name='Blood Group of Patient')),
                ('contact_with_confirmed_carrier', models.BooleanField(default=False, verbose_name='Confirmed Contact with a Covid19 Carrier')),
                ('contact_with_suspected_carrier', models.BooleanField(default=False, verbose_name='Suspected Contact with a Covid19 Carrier')),
                ('estimated_contact_date', models.DateTimeField(blank=True, null=True)),
                ('past_travel', models.BooleanField(default=False, verbose_name='Travelled to Any Foreign Countries in the last 28 Days')),
                ('countries_travelled_old', models.TextField(blank=True, editable=False, null=True, verbose_name='Countries Patient has Travelled to')),
                ('countries_travelled', utils.models.jsonfield.JSONField(blank=True, null=True, verbose_name='Countries Patient has Travelled to')),
                ('date_of_return', models.DateTimeField(blank=True, null=True, verbose_name='Return Date from the Last Country if Travelled')),
                ('present_health', models.TextField(blank=True, default='', verbose_name="Patient's Current Health Details")),
                ('ongoing_medication', models.TextField(blank=True, default='', verbose_name='Already pescribed medication if any')),
                ('has_SARI', models.BooleanField(default=False, verbose_name='Does the Patient Suffer from SARI')),
                ('disease_status', models.IntegerField(blank=True, choices=[(1, 'SUSPECTED'), (2, 'POSITIVE'), (3, 'NEGATIVE'), (4, 'RECOVERY'), (5, 'RECOVERED'), (6, 'EXPIRED')], default=1, verbose_name='Disease Status')),
                ('number_of_aged_dependents', models.IntegerField(blank=True, default=0, verbose_name='Number of people aged above 60 living with the patient')),
                ('number_of_chronic_diseased_dependents', models.IntegerField(blank=True, default=0, verbose_name='Number of people who have chronic diseases living with the patient')),
                ('is_active', models.BooleanField(default=True, help_text='Not active when discharged, or removed from the watchlist')),
                ('date_of_receipt_of_information', models.DateTimeField(blank=True, null=True, verbose_name="Patient's information received date")),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical patient',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.IntegerField(choices=[(10, 'CARE'), (20, 'COVID_TRACKER'), (30, 'STAY')], default=10)),
                ('name', fernet_fields.fields.EncryptedCharField(max_length=200)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Non-binary')])),
                ('phone_number', fernet_fields.fields.EncryptedCharField(max_length=14, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Please Enter 10/11 digit mobile number or landline as 0<std code><phone number>', regex='^((\\+91|91|0)[\\- ]{0,1})?[456789]\\d{9}$')])),
                ('address', fernet_fields.fields.EncryptedTextField(default='')),
                ('date_of_birth', models.DateField(default=None, null=True)),
                ('year_of_birth', models.IntegerField(default=0, null=True)),
                ('nationality', models.CharField(default='', max_length=255, verbose_name='Nationality of Patient')),
                ('passport_no', models.CharField(default='', max_length=255, verbose_name='Passport Number of Foreign Patients')),
                ('aadhar_no', models.CharField(default='', max_length=255, verbose_name='Aadhar Number of Patient')),
                ('is_medical_worker', models.BooleanField(default=False, verbose_name='Is the Patient a Medical Worker')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=4, null=True, verbose_name='Blood Group of Patient')),
                ('contact_with_confirmed_carrier', models.BooleanField(default=False, verbose_name='Confirmed Contact with a Covid19 Carrier')),
                ('contact_with_suspected_carrier', models.BooleanField(default=False, verbose_name='Suspected Contact with a Covid19 Carrier')),
                ('estimated_contact_date', models.DateTimeField(blank=True, null=True)),
                ('past_travel', models.BooleanField(default=False, verbose_name='Travelled to Any Foreign Countries in the last 28 Days')),
                ('countries_travelled_old', models.TextField(blank=True, editable=False, null=True, verbose_name='Countries Patient has Travelled to')),
                ('countries_travelled', utils.models.jsonfield.JSONField(blank=True, null=True, verbose_name='Countries Patient has Travelled to')),
                ('date_of_return', models.DateTimeField(blank=True, null=True, verbose_name='Return Date from the Last Country if Travelled')),
                ('present_health', models.TextField(blank=True, default='', verbose_name="Patient's Current Health Details")),
                ('ongoing_medication', models.TextField(blank=True, default='', verbose_name='Already pescribed medication if any')),
                ('has_SARI', models.BooleanField(default=False, verbose_name='Does the Patient Suffer from SARI')),
                ('disease_status', models.IntegerField(blank=True, choices=[(1, 'SUSPECTED'), (2, 'POSITIVE'), (3, 'NEGATIVE'), (4, 'RECOVERY'), (5, 'RECOVERED'), (6, 'EXPIRED')], default=1, verbose_name='Disease Status')),
                ('number_of_aged_dependents', models.IntegerField(blank=True, default=0, verbose_name='Number of people aged above 60 living with the patient')),
                ('number_of_chronic_diseased_dependents', models.IntegerField(blank=True, default=0, verbose_name='Number of people who have chronic diseases living with the patient')),
                ('is_active', models.BooleanField(default=True, help_text='Not active when discharged, or removed from the watchlist')),
                ('patient_search_id', fernet_fields.fields.EncryptedIntegerField(help_text='FKey to PatientSearch', null=True)),
                ('date_of_receipt_of_information', models.DateTimeField(blank=True, null=True, verbose_name="Patient's information received date")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientConsultation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symptoms', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'ASYMPTOMATIC'), (2, 'FEVER'), (3, 'SORE THROAT'), (4, 'COUGH'), (5, 'BREATHLESSNESS'), (6, 'MYALGIA'), (7, 'ABDOMINAL DISCOMFORT'), (8, 'VOMITING/DIARRHOEA'), (9, 'OTHERS'), (10, 'SARI'), (11, 'SPUTUM'), (12, 'NAUSEA'), (13, 'CHEST PAIN'), (14, 'HEMOPTYSIS'), (15, 'NASAL DISCHARGE'), (16, 'BODY ACHE')], default=1, max_length=38, null=True)),
                ('other_symptoms', models.TextField(blank=True, default='')),
                ('symptoms_onset_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('Mild', 'Category-A'), ('Moderate', 'Category-B'), ('Severe', 'Category-C'), (None, 'UNCLASSIFIED')], default=None, max_length=8, null=True)),
                ('examination_details', models.TextField(blank=True, null=True)),
                ('existing_medication', models.TextField(blank=True, null=True)),
                ('prescribed_medication', models.TextField(blank=True, null=True)),
                ('suggestion', models.CharField(choices=[('HI', 'HOME ISOLATION'), ('A', 'ADMISSION'), ('R', 'REFERRAL')], max_length=3)),
                ('admitted', models.BooleanField(default=False)),
                ('admitted_to', models.IntegerField(blank=True, choices=[(None, 'Not admitted'), (1, 'Isolation Room'), (2, 'ICU'), (3, 'ICU with Ventilator'), (20, 'Home Isolation')], default=None, null=True)),
                ('admission_date', models.DateTimeField(blank=True, null=True)),
                ('discharge_date', models.DateTimeField(blank=True, null=True)),
                ('bed_number', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientContactDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('relation_with_patient', models.IntegerField(choices=[(1, 'FAMILY_MEMBER'), (2, 'FRIEND'), (3, 'RELATIVE'), (4, 'NEIGHBOUR'), (5, 'TRAVEL_TOGETHER'), (6, 'WHILE_AT_HOSPITAL'), (9, 'WHILE_AT_SHOP'), (8, 'WHILE_AT_OFFICE_OR_ESTABLISHMENT'), (9, 'WORSHIP_PLACE'), (10, 'OTHERS')])),
                ('mode_of_contact', models.IntegerField(choices=[(1, 'TOUCHED_BODY_FLUIDS'), (2, 'DIRECT_PHYSICAL_CONTACT'), (3, 'CLEANED_USED_ITEMS'), (4, 'LIVE_IN_SAME_HOUSEHOLD'), (5, 'CLOSE_CONTACT_WITHOUT_PRECAUTION'), (6, 'CO_PASSENGER_AEROPLANE'), (7, 'HEALTH_CARE_WITH_PPE'), (8, 'SHARED_SAME_SPACE_WITHOUT_HIGH_EXPOSURE'), (9, 'TRAVELLED_TOGETHER_WITHOUT_HIGH_EXPOSURE')])),
                ('date_of_first_contact', models.DateField(null=True)),
                ('date_of_last_contact', models.DateField(null=True)),
                ('is_primary', models.BooleanField(help_text='If false, then secondary contact')),
                ('condition_of_contact_is_symptomatic', models.BooleanField(help_text='While in contact, did the patient showing symptoms')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('symptoms', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'ASYMPTOMATIC'), (2, 'FEVER'), (3, 'SORE THROAT'), (4, 'COUGH'), (5, 'BREATHLESSNESS'), (6, 'MYALGIA'), (7, 'ABDOMINAL DISCOMFORT'), (8, 'VOMITING/DIARRHOEA'), (9, 'OTHERS'), (10, 'SARI'), (11, 'SPUTUM'), (12, 'NAUSEA'), (13, 'CHEST PAIN'), (14, 'HEMOPTYSIS'), (15, 'NASAL DISCHARGE'), (16, 'BODY ACHE')], max_length=38)),
                ('other_symptoms', models.TextField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Reason for calling')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientMetaInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('occupation', models.IntegerField(choices=[(2, 'STUDENT'), (2, 'MEDICAL_WORKER'), (2, 'GOVT_EMPLOYEE'), (2, 'PRIVATE_EMPLOYEE'), (2, 'HOME_MAKER'), (2, 'WORKING_ABROAD'), (2, ' OTHERS')])),
                ('head_of_household', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientSampleFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(1, 'REQUEST_SUBMITTED'), (2, 'APPROVED'), (3, 'DENIED'), (4, 'SENT_TO_COLLECTON_CENTRE'), (5, 'RECEIVED_AND_FORWARED'), (6, 'RECEIVED_AT_LAB'), (7, 'COMPLETED')])),
                ('notes', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientSampleTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sample_type', models.IntegerField(choices=[(0, 'UNKNOWN'), (1, 'BA/ETA'), (2, 'TS/NPS/NS'), (3, 'Blood_IN_EDTA'), (4, 'ACUTE_SERA'), (5, 'COVALESCENT_SERA'), (6, 'OTHER_TYPE')], default=0)),
                ('sample_type_other', models.TextField(default='')),
                ('has_sari', models.BooleanField(default=False)),
                ('has_ari', models.BooleanField(default=False)),
                ('doctor_name', models.CharField(default='NO DOCTOR SPECIFIED', max_length=255)),
                ('diagnosis', models.TextField(default='')),
                ('diff_diagnosis', models.TextField(default='')),
                ('etiology_identified', models.TextField(default='')),
                ('is_atypical_presentation', models.BooleanField(default=False)),
                ('atypical_presentation', models.TextField(default='')),
                ('is_unusual_course', models.BooleanField(default=False)),
                ('status', models.IntegerField(choices=[(1, 'REQUEST_SUBMITTED'), (2, 'APPROVED'), (3, 'DENIED'), (4, 'SENT_TO_COLLECTON_CENTRE'), (5, 'RECEIVED_AND_FORWARED'), (6, 'RECEIVED_AT_LAB'), (7, 'COMPLETED')], default=1)),
                ('result', models.IntegerField(choices=[(1, 'POSITIVE'), (2, 'NEGATIVE'), (3, 'AWAITING'), (4, 'INVALID')], default=3)),
                ('fast_track', models.TextField(default='')),
                ('date_of_sample', models.DateTimeField(blank=True, null=True)),
                ('date_of_result', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient_id', fernet_fields.fields.EncryptedIntegerField()),
                ('name', models.CharField(max_length=120)),
                ('gender', models.IntegerField(choices=[(1, 'Male'), (2, 'Female'), (3, 'Non-binary')])),
                ('phone_number', models.CharField(max_length=14)),
                ('date_of_birth', models.DateField(null=True)),
                ('year_of_birth', models.IntegerField()),
                ('state_id', models.IntegerField()),
            ],
        ),
        migrations.AddIndex(
            model_name='patientsearch',
            index=models.Index(fields=['year_of_birth', 'date_of_birth', 'phone_number'], name='patients_pa_year_of_8bcbfc_idx'),
        ),
        migrations.AddIndex(
            model_name='patientsearch',
            index=models.Index(fields=['year_of_birth', 'phone_number'], name='patients_pa_year_of_ee8e23_idx'),
        ),
        migrations.AddField(
            model_name='patientsampletest',
            name='consultation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='patients.PatientConsultation'),
        ),
        migrations.AddField(
            model_name='patientsampletest',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='patientsampleflow',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patientsampleflow',
            name='patient_sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='patients.PatientSampleTest'),
        ),
        migrations.AddField(
            model_name='patientfacility',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patientfacility',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='patientcontactdetails',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contacted_patients', to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='patientcontactdetails',
            name='patient_in_contact',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contacts', to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='patientconsultation',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facility', to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='patientconsultation',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='patientconsultation',
            name='referred_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='referred_patients', to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='patient',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.District'),
        ),
        migrations.AddField(
            model_name='patient',
            name='facility',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='patient',
            name='local_body',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.LocalBody'),
        ),
        migrations.AddField(
            model_name='patient',
            name='meta_info',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.PatientMetaInfo'),
        ),
        migrations.AddField(
            model_name='patient',
            name='nearest_facility',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nearest_facility', to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='patient',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.State'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='district',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.District'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='facility',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='local_body',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.LocalBody'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='nearest_facility',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='state',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='accounts.State'),
        ),
        migrations.AddField(
            model_name='facilitypatientstatshistory',
            name='facility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='facility.Facility'),
        ),
        migrations.AddField(
            model_name='disease',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_history', to='patients.Patient'),
        ),
        migrations.AddField(
            model_name='dailyround',
            name='consultation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='daily_rounds', to='patients.PatientConsultation'),
        ),
        migrations.CreateModel(
            name='PatientConsultationIcmr',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('patients.patientconsultation',),
        ),
        migrations.CreateModel(
            name='PatientIcmr',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('patients.patient',),
        ),
        migrations.CreateModel(
            name='PatientSampleIcmr',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('patients.patientsampletest',),
        ),
        migrations.AddConstraint(
            model_name='patientconsultation',
            constraint=models.CheckConstraint(check=models.Q(models.Q(_negated=True, suggestion='R'), ('referred_to__isnull', False), _connector='OR'), name='if_referral_suggested'),
        ),
        migrations.AddConstraint(
            model_name='patientconsultation',
            constraint=models.CheckConstraint(check=models.Q(('admitted', False), ('admission_date__isnull', False), _connector='OR'), name='if_admitted'),
        ),
        migrations.AlterUniqueTogether(
            name='facilitypatientstatshistory',
            unique_together={('facility', 'entry_date')},
        ),
        migrations.AddIndex(
            model_name='disease',
            index=partial_index.PartialIndex(fields=['patient', 'disease'], name='patients_di_patient_37a9e8_partial', unique=True, where=partial_index.PQ(active=True)),
        ),
    ]
